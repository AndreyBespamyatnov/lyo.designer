// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package org.eclipse.lyo.tools.emf2rdf.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.eclipse.lyo.tools.emf2rdf.resources.RdfDomainConstants;
import org.eclipse.lyo.tools.emf2rdf.resources.Term;

import org.eclipse.lyo.tools.emf2rdf.resources.RdfDomainConstants;
import org.eclipse.lyo.tools.emf2rdf.resources.RdfsDomainConstants;
import org.eclipse.lyo.tools.emf2rdf.resources.Property;

// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(RdfDomainConstants.PROPERTY_NAMESPACE)
@OslcName(RdfDomainConstants.PROPERTY_LOCALNAME)
@OslcResourceShape(title = "Property Resource Shape", describes = RdfDomainConstants.PROPERTY_TYPE)
public class Property
    extends Term
    implements IProperty
{
    // Start of user code attributeAnnotation:subPropertyOf
    // End of user code
    private HashSet<Link> subPropertyOf = new HashSet<Link>();
    // Start of user code attributeAnnotation:domain
    // End of user code
    private HashSet<Link> domain = new HashSet<Link>();
    // Start of user code attributeAnnotation:range
    // End of user code
    private HashSet<Link> range = new HashSet<Link>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Property()
           throws URISyntaxException
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Property(final URI about)
           throws URISyntaxException
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        RdfDomainConstants.PROPERTY_PATH,
        Property.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Property Resource} - update Property.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = getAbout().toString();
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public String toHtml()
    {
        return toHtml(false);
    }
    
    public String toHtml(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toHtml_init
        // End of user code
    
        if (asLocalResource) {
            result = toString(true);
            // Start of user code toHtml_bodyForLocalResource
            // End of user code
        }
        else {
            result = "<a href=\"" + getAbout() + "\" class=\"oslc-resource-link\">" + toString() + "</a>";
        }
    
        // Start of user code toHtml_finalize
        // End of user code
    
        return result;
    }
    
    public void addSubPropertyOf(final Link subPropertyOf)
    {
        this.subPropertyOf.add(subPropertyOf);
    }
    
    public void addDomain(final Link domain)
    {
        this.domain.add(domain);
    }
    
    public void addRange(final Link range)
    {
        this.range.add(range);
    }
    
    
    // Start of user code getterAnnotation:subPropertyOf
    // End of user code
    @OslcName("subPropertyOf")
    @OslcPropertyDefinition(RdfsDomainConstants.RDFS_NAMSPACE + "subPropertyOf")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({RdfDomainConstants.PROPERTY_TYPE})
    @OslcReadOnly(false)
    public HashSet<Link> getSubPropertyOf()
    {
        // Start of user code getterInit:subPropertyOf
        // End of user code
        return subPropertyOf;
    }
    
    // Start of user code getterAnnotation:domain
    // End of user code
    @OslcName("domain")
    @OslcPropertyDefinition(RdfsDomainConstants.RDFS_NAMSPACE + "domain")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getDomain()
    {
        // Start of user code getterInit:domain
        // End of user code
        return domain;
    }
    
    // Start of user code getterAnnotation:range
    // End of user code
    @OslcName("range")
    @OslcPropertyDefinition(RdfsDomainConstants.RDFS_NAMSPACE + "range")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public HashSet<Link> getRange()
    {
        // Start of user code getterInit:range
        // End of user code
        return range;
    }
    
    
    // Start of user code setterAnnotation:subPropertyOf
    // End of user code
    public void setSubPropertyOf(final HashSet<Link> subPropertyOf )
    {
        // Start of user code setterInit:subPropertyOf
        // End of user code
        this.subPropertyOf.clear();
        if (subPropertyOf != null)
        {
            this.subPropertyOf.addAll(subPropertyOf);
        }
    
        // Start of user code setterFinalize:subPropertyOf
        // End of user code
    }
    
    // Start of user code setterAnnotation:domain
    // End of user code
    public void setDomain(final HashSet<Link> domain )
    {
        // Start of user code setterInit:domain
        // End of user code
        this.domain.clear();
        if (domain != null)
        {
            this.domain.addAll(domain);
        }
    
        // Start of user code setterFinalize:domain
        // End of user code
    }
    
    // Start of user code setterAnnotation:range
    // End of user code
    public void setRange(final HashSet<Link> range )
    {
        // Start of user code setterInit:range
        // End of user code
        this.range.clear();
        if (range != null)
        {
            this.range.addAll(range);
        }
    
        // Start of user code setterFinalize:range
        // End of user code
    }
    
    
    static public String subPropertyOfToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:subPropertyOfToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"subPropertyOf\">subPropertyOf: </LABEL>";
    
        // Start of user code "Mid:subPropertyOfToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:subPropertyOfToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String domainToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:domainToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"domain\">domain: </LABEL>";
    
        // Start of user code "Mid:domainToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:domainToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String rangeToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:rangeToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"range\">range: </LABEL>";
    
        // Start of user code "Mid:rangeToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:rangeToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    
    public String subPropertyOfToHtml()
    {
        String s = "";
    
        // Start of user code subPropertyOftoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : subPropertyOf) {
                s = s + "<li>";
                s = s + (new Property (next.getValue())).toHtml(false);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code subPropertyOftoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String domainToHtml()
    {
        String s = "";
    
        // Start of user code domaintoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : domain) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code domaintoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String rangeToHtml()
    {
        String s = "";
    
        // Start of user code rangetoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : range) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code rangetoHtml_finalize
        // End of user code
    
        return s;
    }
    
    
}
