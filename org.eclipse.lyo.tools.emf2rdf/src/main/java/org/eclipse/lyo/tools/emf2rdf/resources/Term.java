// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package org.eclipse.lyo.tools.emf2rdf.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.eclipse.lyo.tools.emf2rdf.resources.RdfsDomainConstants;


import org.eclipse.lyo.tools.emf2rdf.resources.RdfsDomainConstants;

// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(RdfsDomainConstants.TERM_NAMESPACE)
@OslcName(RdfsDomainConstants.TERM_LOCALNAME)
@OslcResourceShape(title = "Term Resource Shape", describes = RdfsDomainConstants.TERM_TYPE)
public class Term
    extends AbstractResource
    implements ITerm
{
    // Start of user code attributeAnnotation:name
    // End of user code
    private String name;
    // Start of user code attributeAnnotation:label
    // End of user code
    private String label;
    // Start of user code attributeAnnotation:isDefinedBy
    // End of user code
    private URI isDefinedBy;
    // Start of user code attributeAnnotation:comment
    // End of user code
    private String comment;
    // Start of user code attributeAnnotation:seeAlso
    // End of user code
    private URI seeAlso;
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Term()
           throws URISyntaxException
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Term(final URI about)
           throws URISyntaxException
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        RdfsDomainConstants.TERM_PATH,
        Term.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Term Resource} - update Term.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = getAbout().toString();
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public String toHtml()
    {
        return toHtml(false);
    }
    
    public String toHtml(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toHtml_init
        // End of user code
    
        if (asLocalResource) {
            result = toString(true);
            // Start of user code toHtml_bodyForLocalResource
            // End of user code
        }
        else {
            result = "<a href=\"" + getAbout() + "\" class=\"oslc-resource-link\">" + toString() + "</a>";
        }
    
        // Start of user code toHtml_finalize
        // End of user code
    
        return result;
    }
    
    
    // Start of user code getterAnnotation:name
    // End of user code
    @OslcName("name")
    @OslcPropertyDefinition(RdfsDomainConstants.RDFS_NAMSPACE + "name")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getName()
    {
        // Start of user code getterInit:name
        // End of user code
        return name;
    }
    
    // Start of user code getterAnnotation:label
    // End of user code
    @OslcName("label")
    @OslcPropertyDefinition(RdfsDomainConstants.RDFS_NAMSPACE + "label")
    @OslcDescription("May be used to provide a human-readable version of a resource's name.")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.XMLLiteral)
    @OslcReadOnly(false)
    public String getLabel()
    {
        // Start of user code getterInit:label
        // End of user code
        return label;
    }
    
    // Start of user code getterAnnotation:isDefinedBy
    // End of user code
    @OslcName("isDefinedBy")
    @OslcPropertyDefinition(RdfsDomainConstants.RDFS_NAMSPACE + "isDefinedBy")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcRange({RdfsDomainConstants.CLASS_TYPE})
    @OslcReadOnly(false)
    public URI getIsDefinedBy()
    {
        // Start of user code getterInit:isDefinedBy
        // End of user code
        return isDefinedBy;
    }
    
    // Start of user code getterAnnotation:comment
    // End of user code
    @OslcName("comment")
    @OslcPropertyDefinition(RdfsDomainConstants.RDFS_NAMSPACE + "comment")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getComment()
    {
        // Start of user code getterInit:comment
        // End of user code
        return comment;
    }
    
    // Start of user code getterAnnotation:seeAlso
    // End of user code
    @OslcName("seeAlso")
    @OslcPropertyDefinition(RdfsDomainConstants.RDFS_NAMSPACE + "seeAlso")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcReadOnly(false)
    public URI getSeeAlso()
    {
        // Start of user code getterInit:seeAlso
        // End of user code
        return seeAlso;
    }
    
    
    // Start of user code setterAnnotation:name
    // End of user code
    public void setName(final String name )
    {
        // Start of user code setterInit:name
        // End of user code
        this.name = name;
    
        // Start of user code setterFinalize:name
        // End of user code
    }
    
    // Start of user code setterAnnotation:label
    // End of user code
    public void setLabel(final String label )
    {
        // Start of user code setterInit:label
        // End of user code
        this.label = label;
    
        // Start of user code setterFinalize:label
        // End of user code
    }
    
    // Start of user code setterAnnotation:isDefinedBy
    // End of user code
    public void setIsDefinedBy(final URI isDefinedBy )
    {
        // Start of user code setterInit:isDefinedBy
        // End of user code
        this.isDefinedBy = isDefinedBy;
    
        // Start of user code setterFinalize:isDefinedBy
        // End of user code
    }
    
    // Start of user code setterAnnotation:comment
    // End of user code
    public void setComment(final String comment )
    {
        // Start of user code setterInit:comment
        // End of user code
        this.comment = comment;
    
        // Start of user code setterFinalize:comment
        // End of user code
    }
    
    // Start of user code setterAnnotation:seeAlso
    // End of user code
    public void setSeeAlso(final URI seeAlso )
    {
        // Start of user code setterInit:seeAlso
        // End of user code
        this.seeAlso = seeAlso;
    
        // Start of user code setterFinalize:seeAlso
        // End of user code
    }
    
    
    static public String nameToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:nameToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"name\">name: </LABEL>";
    
        // Start of user code "Mid:nameToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"name\" type=\"text\" style=\"width: 400px\" id=\"name\" >";
        // Start of user code "Finalize:nameToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String labelToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:labelToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"label\">label: </LABEL>";
    
        // Start of user code "Mid:labelToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"label\" type=\"text\" style=\"width: 400px\" id=\"label\" >";
        // Start of user code "Finalize:labelToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String isDefinedByToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:isDefinedByToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"isDefinedBy\">isDefinedBy: </LABEL>";
    
        // Start of user code "Mid:isDefinedByToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"isDefinedBy\" type=\"text\" style=\"width: 400px\" id=\"isDefinedBy\" >";
        // Start of user code "Finalize:isDefinedByToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String commentToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:commentToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"comment\">comment: </LABEL>";
    
        // Start of user code "Mid:commentToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"comment\" type=\"text\" style=\"width: 400px\" id=\"comment\" >";
        // Start of user code "Finalize:commentToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String seeAlsoToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:seeAlsoToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"seeAlso\">seeAlso: </LABEL>";
    
        // Start of user code "Mid:seeAlsoToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"seeAlso\" type=\"text\" style=\"width: 400px\" id=\"seeAlso\" >";
        // Start of user code "Finalize:seeAlsoToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    
    public String nameToHtml()
    {
        String s = "";
    
        // Start of user code nametoHtml_mid
        // End of user code
    
        try {
            if (name == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + name.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code nametoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String labelToHtml()
    {
        String s = "";
    
        // Start of user code labeltoHtml_mid
        // End of user code
    
        try {
            if (label == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + label.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code labeltoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String isDefinedByToHtml()
    {
        String s = "";
    
        // Start of user code isDefinedBytoHtml_mid
        // End of user code
    
        try {
            if (isDefinedBy == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + isDefinedBy.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code isDefinedBytoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String commentToHtml()
    {
        String s = "";
    
        // Start of user code commenttoHtml_mid
        // End of user code
    
        try {
            if (comment == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + comment.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code commenttoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String seeAlsoToHtml()
    {
        String s = "";
    
        // Start of user code seeAlsotoHtml_mid
        // End of user code
    
        try {
            if (seeAlso == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + seeAlso.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code seeAlsotoHtml_finalize
        // End of user code
    
        return s;
    }
    
    
}
