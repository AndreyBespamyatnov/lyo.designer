[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) Yash Khatri.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Yash Khatri          -  Support for Shacl Shapes.
 *******************************************************************************/
/]

[module generateShaclShape('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::domainSpecificationServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::commonShapeServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::shaclPropertyServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateShapeCommon/]

[template public generateClassHeader(aShaclShape : ShaclShape, contextAdaptorInterface : AdaptorInterface)]
// [protected ('Copyright')]
/*******************************************************************************
 * Copyright (c) 2018 Yash Khatri.
 *
[generateCopyRightStatement(aShaclShape)/]
 *
 * Contributors:
 *
  *     Yash Khatri          - Support for Shacl Shapes.  
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// [/protected]
[/template]

[template public generateImports(aShaclShape : ShaclShape, contextAdaptorInterface : AdaptorInterface, defaultJavaClassPackageName : String)]

[generateCommonImports(contextAdaptorInterface, defaultJavaClassPackageName)/]

import [javaClassFullNameAnnotation('ShaclMaxCount', contextAdaptorInterface) /];
import [javaClassFullNameAnnotation('ShaclMinCount', contextAdaptorInterface) /];
import [javaClassFullNameAnnotation('ShaclDataType', contextAdaptorInterface) /];
import [javaClassFullNameAnnotation('ShaclClassType', contextAdaptorInterface) /];
import [javaClassFullNameAnnotation('ShaclClosed', contextAdaptorInterface) /];

[if (not aShaclShape.directParentShape().oclIsUndefined())]import [javaClassFullName(aShaclShape.directParentShape(), contextAdaptorInterface, defaultJavaClassPackageName) /];[/if]
[for (s: ShaclShape | aShaclShape.interfaceShapes().oclAsType(ShaclShape)->sortedBy(name)) separator(lineSeparator())]import [javaInterfaceFullName(s, contextAdaptorInterface, defaultJavaClassPackageName) /];[/for]
[for (aDomainSpecification: DomainSpecification | (aShaclShape.shaclProperties->union(aShaclShape.interfaceShapeProperties().oclAsType(ShaclProperty)->asSet())->collect(p: ShaclProperty | Set{p.definingDomainSpecification()}->union(p.class.definingDomainSpecification()->asSet())))->flatten()->asSet()->sortedBy(name)) separator(lineSeparator())]import [javaInterfaceFullNameForConstants(aDomainSpecification, contextAdaptorInterface, defaultJavaClassPackageName) /];[/for]
[for (aShaclProperty: ShaclProperty | allShapeProperties(aShaclShape).oclAsType(ShaclProperty)->sortedBy(name))]
[if(Sequence{'Resource'}->includes(aShaclProperty.dataType.toString())) ]
[for (s: ShaclShape | aShaclProperty.class)]
import [javaClassFullName(s, contextAdaptorInterface, defaultJavaClassPackageName) /];
[/for]
[/if]
[/for]
// [protected ('imports')]
// [/protected]
[/template]

[template public generateInstanceAttributes(aShaclShape : ShaclShape, contextAdaptorInterface : AdaptorInterface)]
[for (aShaclProperty: ShaclProperty | ((aShaclShape.shaclProperties->asSequence())->union(interfaceShapeProperties(aShaclShape).oclAsType(ShaclProperty))))]
// [protected ('attributeAnnotation:'.concat(javaAttributeName(aShaclProperty, aShaclShape)))]
// [/protected]
private [javaAttributeTypeDeclaration(aShaclProperty) /] [javaAttributeName(aShaclProperty, aShaclShape)/][if javaAttributeTypeNeedsConstruction(aShaclProperty)] = new [javaAttributeTypeDeclaration(aShaclProperty)/]()[/if];
[/for]
[/template]

[template public generateConstructors(aShaclShape : ShaclShape, contextAdaptorInterface : AdaptorInterface)]
[generateConstructorsCommon(aShaclShape, contextAdaptorInterface)/]
[/template]

[template public generateShaclShapeMethods(aShaclShape : ShaclShape, contextAdaptorInterface : AdaptorInterface)]
public static ShaclShape createShaclShape() throws OslcCoreApplicationException, URISyntaxException {
    return ShaclShapeFactory.createShaclShape(OSLC4JUtils.getServletURI(),
    OslcConstants.PATH_SHACL_SHAPES,
    [javaInterfaceNameForConstants(aShaclShape.definingDomainSpecification())/].[shapePathConstantName(aShaclShape)/],
    [javaClassName(aShaclShape) /].class);
}
[/template]

[template public generateAddToAttributeMethods(aShaclShape : ShaclShape, contextAdaptorInterface : AdaptorInterface)]
[for (aShaclProperty: ShaclProperty | ((aShaclShape.shaclProperties->asSequence())->union(interfaceShapeProperties(aShaclShape).oclAsType(ShaclProperty))))]
    [if ((aShaclProperty.maxCount < 0) or (aShaclProperty.maxCount > 1))]
public void add[javaAttributeName(aShaclProperty, aShaclShape).toUpperFirst()/](final [javaAttributeBaseType(aShaclProperty) /] [javaName(aShaclProperty, false)/])
{
    this.[javaAttributeName(aShaclProperty, aShaclShape) /].add([javaName(aShaclProperty, false)/]);
}

    [/if]
[/for]
[/template]

[template public generateGetters(aShaclShape : ShaclShape, contextAdaptorInterface : AdaptorInterface)]
[for (aShaclProperty: ShaclProperty | ((aShaclShape.shaclProperties->asSequence())->union(interfaceShapeProperties(aShaclShape).oclAsType(ShaclProperty))))]
// [protected ('getterAnnotation:'.concat(javaAttributeName(aShaclProperty, aShaclShape)))]
// [/protected]
[if (not (nameAnnotation(aShaclProperty) = ''))]
[nameAnnotation(aShaclProperty)/]
[/if]
[if (not (propertyDefinitionAnnotation(aShaclProperty, aShaclShape, contextAdaptorInterface) = ''))]
[propertyDefinitionAnnotation(aShaclProperty, aShaclShape, contextAdaptorInterface)/]
[/if]
[if (not (minCountAnnotation(aShaclProperty) = ''))]
[minCountAnnotation(aShaclProperty)/]
[/if]
[if (not (maxCountAnnotation(aShaclProperty) = ''))]
[maxCountAnnotation(aShaclProperty)/]
[/if]
[if (not (dataTypeAnnotation(aShaclProperty) = ''))]
[dataTypeAnnotation(aShaclProperty)/]
[/if]
[if (not (classAnnotation(aShaclProperty, aShaclShape, contextAdaptorInterface)= ''))]
[classAnnotation(aShaclProperty, aShaclShape, contextAdaptorInterface)/]
[/if]
public [javaAttributeTypeDeclaration(aShaclProperty) /] [if (aShaclProperty.dataType.toString() = 'Boolean')]is[else]get[/if][javaAttributeName(aShaclProperty, aShaclShape).toUpperFirst() /]();
{    
// [protected ('getterInit:'.concat(javaAttributeName(aShaclProperty, aShaclShape)))]
// [/protected]
return [javaAttributeName(aShaclProperty, aShaclShape) /];
}
[/for]
[/template]

[template public generateSetters(aShaclShape : ShaclShape, contextAdaptorInterface : AdaptorInterface)]
[for (aShaclProperty: ShaclProperty | ((aShaclShape.shaclProperties->asSequence())->union(interfaceShapeProperties(aShaclShape).oclAsType(ShaclProperty))))]
// [protected ('setterAnnotation:'.concat(javaAttributeName(aShaclProperty, aShaclShape)))]
// [/protected]
public void set[javaAttributeName(aShaclProperty, aShaclShape).toUpperFirst()/](final [javaAttributeTypeDeclaration(aShaclProperty) /] [javaName(aShaclProperty, false)/] )
{
    // [protected ('setterInit:'.concat(javaAttributeName(aShaclProperty, aShaclShape)))]
    // [/protected]
[if ((aShaclProperty.oclAsType(ShaclProperty).maxCount < 0) or (aShaclProperty.oclAsType(ShaclProperty).maxCount > 1))]
    this.[javaAttributeName(aShaclProperty, aShaclShape) /].clear();
    if ([javaName(aShaclProperty, false)/] != null)
    {
        this.[javaAttributeName(aShaclProperty, aShaclShape) /].addAll([javaName(aShaclProperty, false)/]);
    }
[else]
    this.[javaAttributeName(aShaclProperty, aShaclShape) /] = [javaName(aShaclProperty, false)/];
[/if]

    // [protected ('setterFinalize:'.concat(javaAttributeName(aShaclProperty, aShaclShape)))]
    // [/protected]
}

[/for]
[/template]

[template public generateShaclShape(aShaclShape : ShaclShape, contextAdaptorInterface : AdaptorInterface, defaultJavaFilesPath : String, defaultJavaClassPackageName : String)]
[file (javaClassFullFileName(aShaclShape, contextAdaptorInterface, defaultJavaFilesPath, defaultJavaClassPackageName), false, 'UTF-8')]
[generateClassHeader(aShaclShape, contextAdaptorInterface)/]

[generatePackageDeclaration(aShaclShape, contextAdaptorInterface, defaultJavaClassPackageName)/]

[generateImports(aShaclShape, contextAdaptorInterface, defaultJavaClassPackageName)/]

[generatePreClassCode(aShaclShape, contextAdaptorInterface)/]

[generateClassAnnotations(aShaclShape, contextAdaptorInterface)/]
[generateClassDeclaration(aShaclShape, contextAdaptorInterface)/]
{
    [generateInstanceAttributes(aShaclShape, contextAdaptorInterface)/]
    [generateClassAttributes(aShaclShape, contextAdaptorInterface)/]
    [generateClassMethods(aShaclShape, contextAdaptorInterface)/]
    [generateConstructors(aShaclShape, contextAdaptorInterface)/]
    [generateAddToAttributeMethods(aShaclShape, contextAdaptorInterface)/]
    [generateGetters(aShaclShape, contextAdaptorInterface)/]
    [generateSetters(aShaclShape, contextAdaptorInterface)/]
}
[/file]
[/template]
