[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2018 Yash Khatri and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *    Yash Khatri        Support Shacl Shapes.
 *******************************************************************************/
/]

[module generateShaclShapeInterface('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::shaclShapeServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::shaclPropertyServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::domainSpecificationServices/]

[template public generateShaclShapeInterface(aShaclShape : ShaclShape, contextAdaptorInterface : AdaptorInterface, managingAdaptorInterface: AdaptorInterface, defaultJavaFilesPath : String, defaultJavaClassPackageName : String)]
[file (javaInterfaceFullFileName(aShaclShape, contextAdaptorInterface, defaultJavaFilesPath, defaultJavaClassPackageName), false, 'UTF-8')]
// [protected ('Copyright')]
/*******************************************************************************
 * Copyright (c) 2018 Yash Khatri and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *    Yash Khatri        Support for Shacl Shapes.
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// [/protected]

package [javaInterfacePackageName(aShaclShape, contextAdaptorInterface, defaultJavaClassPackageName) /];

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;

import [javaInterfaceFullNameForConstants(aShaclShape.definingDomainSpecification(), contextAdaptorInterface, defaultJavaClassPackageName)/];
[for (aDomainSpecification: DomainSpecification | (aShaclShape.shaclProperties->union(aShaclShape.interfaceShaclProperties()->asSet())->collect(p: ShaclProperty | Set{p.definingDomainSpecification()}->union(p.class.definingDomainSpecification()->asSet())))->flatten()->asSet()->sortedBy(name)) separator(lineSeparator())]import [javaInterfaceFullNameForConstants(aDomainSpecification, contextAdaptorInterface, defaultJavaClassPackageName) /];[/for]
[for (aShaclProperty: ShaclProperty | allShacProperties(aShaclShape)->sortedBy(name))]
[if(Sequence{'Resource'}->includes(aShaclProperty.dataType.toString())) ]
[for (s: ShaclShape | aShaclProperty.class)]
import [javaInterfaceFullName(s, contextAdaptorInterface, defaultJavaClassPackageName) /];
[/for]
[/if]
[/for]

// [protected ('imports')]
// [/protected]

[namespaceAnnotation(aShaclShape)/]
[nameAnnotation(aShaclShape)/]
[shaclShapeAnnotation(aShaclShape)/]
public interface [javaInterfaceName(aShaclShape) /]
{

[for (aShaclProperty: ShaclProperty | aShaclShape.shaclProperties)]
    [if ((aShaclProperty.oclAsType(ShaclProperty).maxCount < 0) or (aShaclProperty.oclAsType(ShaclProperty).maxCount > 1))]
    public void add[javaAttributeName(aShaclProperty, aShaclShape).toUpperFirst()/](final [javaAttributeBaseType(aShaclProperty) /] [javaName(aShaclProperty, false)/] );
    [/if]
[/for]

[for (aShaclProperty: ShaclProperty | aShaclShape.shaclProperties)]
    [if (not (nameAnnotation(aShaclProperty) = ''))]
    [nameAnnotation(aShaclProperty)/]
    [/if]
    [if (not (propertyDefinitionAnnotation(aShaclProperty, aShaclShape, contextAdaptorInterface) = ''))]
    [propertyDefinitionAnnotation(aShaclProperty, aShaclShape, contextAdaptorInterface)/]
    [/if]
    [if (not (minCountAnnotation(aShaclProperty) = ''))]
    [minCountAnnotation(aShaclProperty)/]
    [/if]
    [if (not (maxCountAnnotation(aShaclProperty) = ''))]
    [maxCountAnnotation(aShaclProperty)/]
    [/if]
    [if (not (dataTypeAnnotation(aShaclProperty) = ''))]
    [dataTypeAnnotation(aShaclProperty)/]
    [/if]
    [if (not (classAnnotation(aShaclProperty, aShaclShape, contextAdaptorInterface)= ''))]
    [classAnnotation(aShaclProperty, aShaclShape, contextAdaptorInterface)/]
    [/if]
    public [javaAttributeTypeDeclaration(aShaclProperty) /] [if (aShaclProperty.dataType.toString() = 'Boolean')]is[else]get[/if][javaAttributeName(aShaclProperty, aShaclShape).toUpperFirst() /]();

[/for]

[for (aShaclProperty: ShaclProperty | aShaclShape.shaclProperties)]
    public void set[javaAttributeName(aShaclProperty, aShaclShape).toUpperFirst()/](final [javaAttributeTypeDeclaration(aShaclProperty) /] [javaName(aShaclProperty, false)/] );
[/for]
}

[/file]
[/template]

